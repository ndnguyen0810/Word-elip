package buoi9.bai1;

public class MainManagerUI {
	super(title);

	listData=new ListCategory();

	}

	public void doShow()

	{

	setDefaultCloseOperation(EXIT_ON_CLOSE);

	setSize(800, 550);

	addControl();

	setLocationRelativeTo(null);

	setVisible(true);

	}

	public void addMenu()

	{

	menubar=new JMenuBar();

	mnuFile=new JMenu(“File”);

	mnuFileWritetodisk=new JMenuItem(“Write Data to disk”);

	mnuFileOpenDataFromDisk=new JMenuItem(“Open Data from disk”);

	mnuFileExit =new JMenuItem(“Exit”);

	menubar.add(mnuFile);

	mnuFile.add(mnuFileWritetodisk);

	mnuFile.add(mnuFileOpenDataFromDisk);

	mnuFile.addSeparator();

	mnuFile.add(mnuFileExit);

	setJMenuBar(menubar);

	}

	public void addControl()

	{

	addMenu();

	JPanel pnBorder=new JPanel();

	pnBorder.setLayout(new BorderLayout());

	JPanel pnNorth=new JPanel();

	JLabel lblTitle=new JLabel(“Quản lý sản phẩm”);

	Font ftTitle=new Font(“arial”, Font.BOLD, 32);

	lblTitle.setFont(ftTitle);

	lblTitle.setForeground(Color.BLUE);

	pnNorth.add(lblTitle);

	pnBorder.add(pnNorth,BorderLayout.NORTH);

	JPanel pnListCate=new JPanel();

	JPanel pnListProduct=new JPanel();

	JSplitPane slitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, pnListCate, pnListProduct);

	pnBorder.add(slitPane,BorderLayout.CENTER);

	pnListCate.setLayout(new BorderLayout());

	lstCate=new JList();

	TitledBorder cateborder=new TitledBorder(BorderFactory.createLineBorder(Color.RED), “Danh mục sản phẩm”);

	lstCate.setBorder(cateborder);

	pnListCate.setPreferredSize(new Dimension(300, 0));

	pnListCate.add(lstCate,BorderLayout.CENTER);

	JPanel pnListCateSouth=new JPanel();

	btnCateNew =new JButton(“New”);

	pnListCateSouth.add(btnCateNew);

	btnCateUpdate =new JButton(“Update”);

	pnListCateSouth.add(btnCateUpdate);

	btnCateRemove =new JButton(“Remove”);

	pnListCateSouth.add(btnCateRemove);

	pnListCate.add(pnListCateSouth,BorderLayout.SOUTH);

	pnListProduct.setLayout(new BorderLayout());

	JPanel pnProductTitle=new JPanel();

	JLabel lblProductTitle=new JLabel(“Thông tin chi tiết”);

	pnProductTitle.add(lblProductTitle);

	pnListProduct.add(pnProductTitle,BorderLayout.NORTH);

	JPanel pnProductTable=new JPanel();

	pnProductTable.setLayout(new BorderLayout());

	pnListProduct.add(pnProductTable,BorderLayout.CENTER);

	dtmProduct =new DefaultTableModel();

	dtmProduct.addColumn(“Product ID”);

	dtmProduct.addColumn(“Product Name”);

	dtmProduct.addColumn(“UnitPrice”);

	dtmProduct.addColumn(“Quantity”);

	dtmProduct.addColumn(“Description”);

	tblProduct=new JTable(dtmProduct);

	JScrollPane sctblproduct=new JScrollPane(tblProduct );

	pnProductTable.add(sctblproduct,BorderLayout.CENTER);

	JPanel pnProductDetail=new JPanel();

	pnListProduct.add(pnProductDetail,BorderLayout.SOUTH);

	pnProductDetail.setLayout(new BoxLayout(pnProductDetail, BoxLayout.Y_AXIS ));

	JPanel pnCateList=new JPanel();

	JLabel lblCateId=new JLabel(“Category :”);

	cboCateList=new JComboBox();

	pnCateList.add(lblCateId);

	pnCateList.add(cboCateList);

	pnProductDetail.add(pnCateList);

	JPanel pnProductId=new JPanel();

	JLabel lblProId=new JLabel(“Product ID:”);

	txtId=new JTextField(20);

	pnProductId.add(lblProId);

	pnProductId.add(txtId);

	pnProductDetail.add(pnProductId);

	JPanel pnProductName=new JPanel();

	JLabel lblProName=new JLabel(“Product Name:”);

	txtName=new JTextField(20);

	pnProductName.add(lblProName);

	pnProductName.add(txtName);

	pnProductDetail.add(pnProductName);

	JPanel pnProductUnitPrice=new JPanel();

	JLabel lblUnitPrice=new JLabel(“Unit Price:”);

	txtUnitprice=new JTextField(20);

	pnProductUnitPrice.add(lblUnitPrice);

	pnProductUnitPrice.add(txtUnitprice);

	pnProductDetail.add(pnProductUnitPrice);

	JPanel pnProductQuantity=new JPanel();

	JLabel lblQuantity=new JLabel(“Quantity:”);

	txtQuantity=new JTextField(20);

	pnProductQuantity.add(lblQuantity);

	pnProductQuantity.add(txtQuantity);

	pnProductDetail.add(pnProductQuantity);

	JPanel pnProductDescription=new JPanel();

	JLabel lblDescription=new JLabel(“Description:”);

	txtDescription=new JTextArea(4, 20);

	JScrollPane scare=new JScrollPane(txtDescription);

	pnProductDescription.add(lblDescription);

	pnProductDescription.add(scare);

	pnProductDetail.add(pnProductDescription);

	JPanel pnButton=new JPanel();

	btnNew=new JButton(“New”);

	btnSave=new JButton(“Save”);

	btnRemove=new JButton(“Remove”);

	pnButton.add(btnNew);

	pnButton.add(btnSave);

	pnButton.add(btnRemove);

	pnProductDetail.add(pnButton);

	cboCateList.setPreferredSize(txtId.getPreferredSize());

	lblCateId.setPreferredSize(lblProName.getPreferredSize());

	lblDescription.setPreferredSize(lblProName.getPreferredSize());

	lblQuantity.setPreferredSize(lblProName.getPreferredSize());

	lblUnitPrice.setPreferredSize(lblProName.getPreferredSize());

	lblProId.setPreferredSize(lblProName.getPreferredSize());

	Container con=getContentPane();

	con.add(pnBorder);

	btnCateNew.addActionListener(new processButtonEvent());

	btnNew.addActionListener(new processButtonEvent());

	btnSave.addActionListener(new processButtonEvent());

	btnRemove.addActionListener(new processButtonEvent());

	cboCateList.addActionListener(new processButtonEvent());

	mnuFileWritetodisk.addActionListener(new processButtonEvent());

	mnuFileOpenDataFromDisk.addActionListener(new processButtonEvent());

	lstCate.addListSelectionListener(new ListSelectionListener() {

	@Override

	public void valueChanged(ListSelectionEvent arg0) {

	selectedCate=(Category) lstCate.getSelectedValue();

	showListProductIntoTable();

	}

	});

	}

	private void showListProductIntoTable()

	{

	dtmProduct.setRowCount(0);

	for(Product p: selectedCate.getListPro())

	{

	Vector<String> vec=new Vector<String>();

	vec.add(p.getProductId());

	vec.add(p.getProductName());

	vec.add(p.getUnitPrice()+””);

	vec.add(p.getQuantity()+””);

	vec.add(p.getDescription());

	dtmProduct.addRow(vec);

	}

	}

	public static void updateCateList()

	{

	lstCate.removeAll();

	lstCate.setListData(listData.getList().toArray());

	lstCate.updateUI();

	cboCateList.removeAllItems();

	for(Category cate : listData.getList())

	{

	cboCateList.addItem(cate);

	}

	}

	private void doCreateNewCate()

	{

	CategoryManagerUI cateUI=new CategoryManagerUI(“Cate information”);

	cateUI.doShow();

	}

	private void doSaveProduct()

	{

	if(selectedCate!=null)

	{

	Product p=new Product();

	p.setProductId(txtId.getText());

	p.setProductName(txtName.getText());

	p.setQuantity(Integer.parseInt(txtQuantity.getText()));

	p.setUnitPrice(Double.parseDouble(txtUnitprice.getText()));

	p.setDescription(txtDescription.getText());

	selectedCate.addProduct(p);

	}

	}

	private void doComboboxSelected()

	{

	selectedCate=(Category) cboCateList.getSelectedItem();

	}

	private void doWriteDataToDisk()

	{

	JFileChooser fc=new JFileChooser(“.”);

	if(fc.showSaveDialog(null)==JFileChooser.APPROVE_OPTION)

	{

	MyProcessFile.saveData(listData, fc.getSelectedFile().getAbsolutePath());

	}

	}

	private void doReadDataFromDisk()

	{

	JFileChooser fc=new JFileChooser(“.”);

	if(fc.showOpenDialog(null)==JFileChooser.APPROVE_OPTION)

	{

	listData=(ListCategory)      MyProcessFile.openData(fc.getSelectedFile().getAbsolutePath());

	updateCateList();

	}

	}

	private class processButtonEvent implements ActionListener

	{

	@Override

	public void actionPerformed(ActionEvent e) {

	Object o=e.getSource();

	if(o.equals(btnCateNew))

	{

	doCreateNewCate();

	}

	else if(o.equals(btnNew))

	{

	txtDescription.setText(“”);

	txtId.setText(“”);

	txtName.setText(“”);

	txtUnitprice.setText(“”);

	txtQuantity.setText(“”);

	txtId.requestFocus();

	}

	else if(o.equals(btnSave))

	{

	doSaveProduct();

	}

	else if(o.equals(cboCateList))

	{

	doComboboxSelected();

	}

	else if(o.equals(mnuFileWritetodisk))

	{

	doWriteDataToDisk();

	}

	else if(o.equals(mnuFileOpenDataFromDisk))

	{

	doReadDataFromDisk();

	}

	}

	}

	}

	CategoryManagerUI.java:

	import java.awt.Container;
	import java.awt.event.ActionEvent;

	import java.awt.event.ActionListener;

	import javax.swing.BoxLayout;

	import javax.swing.JButton;

	import javax.swing.JFrame;

	import javax.swing.JLabel;

	import javax.swing.JPanel;

	import javax.swing.JTextField;

	public class CategoryManagerUI extends JFrame{

	private static final long serialVersionUID = 1L;

	private JTextField txtId,txtName;

	private JButton btnOk;

	public CategoryManagerUI(String title)

	{

	setTitle(title);

	}

	public void doShow()

	{

	setDefaultCloseOperation(DISPOSE_ON_CLOSE);

	setSize(300, 150);

	addControl();

	setLocationRelativeTo(null);

	setAlwaysOnTop(true);

	setVisible(true);

	}

	public void addControl()

	{

	JPanel pnBox=new JPanel();

	pnBox.setLayout(new BoxLayout(pnBox, BoxLayout.Y_AXIS));

	JPanel pnId=new JPanel();

	txtId=new JTextField(15);

	txtName=new JTextField(15);

	JLabel lblId=new JLabel(“Cate Id:”);

	JLabel lblName=new JLabel(“Cate Name:”);

	pnId.add(lblId);

	pnId.add(txtId);

	pnBox.add(pnId);

	JPanel pnName=new JPanel();

	pnName.add(lblName);

	pnName.add(txtName);

	pnBox.add(pnName);

	JPanel pnButton=new JPanel();

	btnOk=new JButton(“OK”);

	pnButton.add(btnOk);

	pnBox.add(pnButton);

	lblId.setPreferredSize(lblName.getPreferredSize());

	Container con=getContentPane();

	con.add(pnBox);

	btnOk.addActionListener(new ActionListener() {

	public void actionPerformed(ActionEvent arg0) {

	Category cate=new Category(txtId.getText(), txtName.getText());

	MainManagerUI.listData.addCate(cate);

	MainManagerUI.updateCateList();

	dispose();

	}

	});

	}
}
