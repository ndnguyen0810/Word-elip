package buoi9.bai1;

import java.sql.*;
import java.util.Vector;

import javax.swing.*;
import javax.swing.plaf.basic.BasicListUI.ListDataHandler;
import javax.swing.table.*;

public class SanPham {

	public SanPham(String maSP, String tenSP, int gia, int soluong, String motaSP, String maDM) {
		super();
		this.maSP = maSP;
		this.tenSP = tenSP;
		this.gia = gia;
		this.soluong = soluong;
		this.motaSP = motaSP;
		this.maDM = maDM;
	}

	public SanPham() {
		super();
		con = ConnectBuoi9_bai1.getConnection();
	}

	private String maSP;
	private String tenSP;
	private int gia;
	private int soluong;
	private String motaSP;
	private String maDM;

	public String getMaSP() {
		return maSP;
	}

	public void setMaSP(String maSP) {
		this.maSP = maSP;
	}

	public String getTenSP() {
		return tenSP;
	}

	public void setTenSP(String tenSP) {
		this.tenSP = tenSP;
	}

	public int getGia() {
		return gia;
	}

	public void setGia(int gia) {
		this.gia = gia;
	}

	public int getSoluong() {
		return soluong;
	}

	public void setSoluong(int soluong) {
		this.soluong = soluong;
	}

	public String getMotaSP() {
		return motaSP;
	}

	public void setMotaSP(String motaSP) {
		this.motaSP = motaSP;
	}

	public String getMaDM() {
		return maDM;
	}

	public void setMaDM(String maDM) {
		this.maDM = maDM;
	}

	/// xử lý nè babi

	private Connection con;
	ConnectBuoi9_bai1 MyCon = new ConnectBuoi9_bai1();

	public void insert(SanPham sp) {
		try {
			String sql = String.format(
					"insert into sanpham(masp, tensp, gia, soluong,mota, madm)values ('%s', '%s',%d, %d, '%s','%s')",
					sp.maSP, sp.tenSP, sp.gia, sp.soluong, sp.motaSP, sp.maDM);

			PreparedStatement s = con.prepareStatement(sql);
			System.err.println(s);
			if (s.executeUpdate() > 0) {
				JOptionPane.showMessageDialog(null, "Thêm thành công");
			} else {
				JOptionPane.showMessageDialog(null, "Thêm thất bại");
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
	}

	public void delete(SanPham sp) {
		try {
			String sql = String.format("delete from sanpham where masp='%s'", sp.maSP);
			PreparedStatement s = con.prepareStatement(sql);
			if (s.executeUpdate() > 0) {
				JOptionPane.showMessageDialog(null, "Xoá thành công");
			} else {
				JOptionPane.showMessageDialog(null, "Xoá thất bại");
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
	}

	public void Update(SanPham sp) {
		try {
			String sql = String.format(
					"update sanpham set masp='%s', tensp='%s', gia=%d, soluong=%d, mota='%s' madm='%s' where masp=%s'",
					sp.maSP, sp.tenSP, sp.gia, sp.soluong, sp.motaSP, sp.maDM, sp.maSP);
			PreparedStatement s = con.prepareStatement(sql);
			if (s.executeUpdate() > 0) {
				JOptionPane.showMessageDialog(null, "Cập nhật thành công");
			} else {
				JOptionPane.showMessageDialog(null, "Cập nhật thất bại");
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
	}

	public void showSP_InTable(JTable tb) {
		try {
			DefaultTableModel dtm = new DefaultTableModel();
			ResultSet rs = MyCon.getInfo(
					"SELECT s.MaSP, s.Ten, s.Gia, SoLuong,s.MoTa, d.TenDM FROM sanpham s, danhmuc d WHERE s.MaDM=d.MaDM");
			Vector<String> colName = new Vector<>();
			colName.add("Product ID");
			colName.add("Product Name");
			colName.add("Unit Price");
			colName.add("Quantity");
			colName.add("Description");
			colName.add("Caterogy name");
			Vector<String> row;
			dtm.setColumnIdentifiers(colName);
			dtm.addRow(colName);
			while (rs.next()) {
				row = new Vector<>();
				row.add(rs.getString("masp"));
				row.add(rs.getString("ten"));
				row.add(rs.getString("gia"));
				row.add(rs.getString("soluong"));
				row.add(rs.getString("mota"));
				row.add(rs.getString("tendm"));
				dtm.addRow(row);
			}
			tb.setModel(dtm);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void showSP_InList(JTable t,String maDM) {
		try {
			PreparedStatement ps = con.prepareStatement(String.format(
					"SELECT sp.MASP,sp.TENSP,sp.GIA,sp.SOLUONG,sp.MOTA,dm.TENDM FROM danhmuc dm,sanpham sp "
					+ "where sp.MADM = dm.MADM and dm.MADM = '%s'",maDM));
			ResultSet rs = ps.executeQuery();
			DefaultTableModel dm = (DefaultTableModel) t.getModel();
			dm.setRowCount(0);
			while (rs.next()) {
				Object o[] = { rs.getString("MASP"), rs.getString("TENSP"), rs.getString("GIA"),
						rs.getString("SOLUONG"), rs.getString("MOTA"),rs.getString("TENDM")};
				dm.addRow(o);
			}
		} catch (Exception e) {
			System.out.print(e);
		}
	}

}
